## The Big One.
   ============
                   â€” One script to rule them all.

This script uses all CarbonScript features. It can be used as a
"quick language tour" and for testing purposes.

This is a multiline comment by the way.
##

# And that's a single line comment on its own line.

      # Or on a (badly) indented line.

const assignment = true  # And another single line comment.

const equal = 1 == 1
const not_equal = 1 != 2

const comp_gt = 3 > 2
const comp_gte = 3 >= 3
const comp_lt = 2 < 3
const comp_lte = 2 <= 2

const add = 3 + 4
const subtract = 3 - 4

const multiply = 3 * 4
const divide = 3 / 4
const int_divide = 4 // 3
const modulo = 4 % 4

const power = 2 ** 4

const unary_plus = +7
const unary_minus = -7
const unary_bang = !true

const number_int = 36
const number_float = 1.618
const string = "hello, world\n"
const string_with_escapes = "\"foo\""
const boolean_true = true
const boolean_false = false
const null_value = null
const parenthesis = 3 * (4 + 1)
const identifier = power

var variable = "initial value"
variable = "redefined value"

var chained_1 = null
var chained_2 = null
const chained_assign = chained_1 = chained_2 = 9


var foo = 42
var bar = 3

if (true)
# TODO:    print(foo)  # 42
# TODO:    print(bar)  # 3

    foo = 108  # Mutate "foo".
    var bar = 7  # Redefine "bar".

    var baz = 1.618  # Declare "baz"
    # var baz = 123.0  # Error, redefinition of "baz".

# TODO: print(foo)  # 108
# TODO: print(bar)  # 3
# print(baz)  # Error, out of scope.


## Arbitrary blocks are valid syntax. They can be useful in scientific
   computations with many intermediate/temporary values. ##

    var some_temporary_variable = 1 / (foo * bar)
    # *use "some_temporary_variable".*
    # Will be out of scope on the next line (block exit).


var test_cond_a = 0
var test_cond_b = true

if ((test_cond_b = false) == true)
    test_cond_a = 7
else if (false)
    test_cond_a = 9
else
    test_cond_a = 42

# TODO: print(test_cond_a)  # 42
# TODO: print(test_cond_b)  # false

##
func hello()
    var baz = 1

while (true)
    for (var i in [1..10:1])
        print(i)
##
